name: Build Kernel

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up environment variables
        run: |
          echo "CONFIG_ENV=config.env" >> $GITHUB_ENV
          echo "KERNEL_SOURCE=https://github.com/NoxNfl/Kernel-corfu.git" >> $GITHUB_ENV
          echo "KERNEL_SOURCE_BRANCH=corfu" >> $GITHUB_ENV
          echo "KERNEL_CONFIG=corfu_defconfig" >> $GITHUB_ENV
          echo "KERNEL_IMAGE_NAME=Image.gz" >> $GITHUB_ENV
          echo "ARCH=arm64" >> $GITHUB_ENV
          echo "ADD_LOCALVERSION_TO_FILENAME=false" >> $GITHUB_ENV
          echo "EXTRA_CMDS=LD=ld.lld" >> $GITHUB_ENV
          echo "USE_CUSTOM_CLANG=false" >> $GITHUB_ENV
          echo "CUSTOM_CLANG_SOURCE=" >> $GITHUB_ENV
          echo "CUSTOM_CLANG_BRANCH=" >> $GITHUB_ENV
          echo "CUSTOM_CMDS=CLANG_TRIPLE=aarch64-linux-gnu-" >> $GITHUB_ENV
          echo "CLANG_BRANCH=master-kernel-build-2022" >> $GITHUB_ENV
          echo "CLANG_VERSION=r450784e" >> $GITHUB_ENV
          echo "ENABLE_GCC_ARM64=true" >> $GITHUB_ENV
          echo "ENABLE_GCC_ARM32=true" >> $GITHUB_ENV
          echo "USE_CUSTOM_GCC_64=false" >> $GITHUB_ENV
          echo "CUSTOM_GCC_64_SOURCE=" >> $GITHUB_ENV
          echo "CUSTOM_GCC_64_BRANCH=" >> $GITHUB_ENV
          echo "CUSTOM_GCC_64_BIN=aarch64-linux-android-" >> $GITHUB_ENV
          echo "USE_CUSTOM_GCC_32=false" >> $GITHUB_ENV
          echo "CUSTOM_GCC_32_SOURCE=" >> $GITHUB_ENV
          echo "CUSTOM_GCC_32_BRANCH=" >> $GITHUB_ENV
          echo "CUSTOM_GCC_32_BIN=arm-linux-androideabi-" >> $GITHUB_ENV
          echo "ENABLE_KERNELSU=true" >> $GITHUB_ENV
          echo "KERNELSU_TAG=v0.9.5" >> $GITHUB_ENV
          echo "KSU_EXPECTED_SIZE=" >> $GITHUB_ENV
          echo "KSU_EXPECTED_HASH=" >> $GITHUB_ENV
          echo "DISABLE_LTO=false" >> $GITHUB_ENV
          echo "DISABLE_CC_WERROR=false" >> $GITHUB_ENV
          echo "ADD_KPROBES_CONFIG=true" >> $GITHUB_ENV
          echo "ADD_OVERLAYFS_CONFIG=true" >> $GITHUB_ENV
          echo "APPLY_KSU_PATCH=true" >> $GITHUB_ENV
          echo "REMOVE_UNUSED_PACKAGES=false" >> $GITHUB_ENV
          echo "USE_CUSTOM_ANYKERNEL3=false" >> $GITHUB_ENV
          echo "CUSTOM_ANYKERNEL3_SOURCE=" >> $GITHUB_ENV
          echo "CUSTOM_ANYKERNEL3_BRANCH=" >> $GITHUB_ENV
          echo "ENABLE_CCACHE=true" >> $GITHUB_ENV
          echo "NEED_DTBO=false" >> $GITHUB_ENV
          echo "BUILD_BOOT_IMG=true" >> $GITHUB_ENV
          echo "SOURCE_BOOT_IMAGE=https://github.com/NoxNfl/KernelSU_Action/raw/refs/heads/main/boot/boot.img" >> $GITHUB_ENV

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git clang gcc g++ make ccache

      - name: Build Kernel
        run: |
          git clone $KERNEL_SOURCE -b $KERNEL_SOURCE_BRANCH kernel
          cd kernel
          make O=out $KERNEL_CONFIG
          make O=out -j$(nproc) ARCH=$ARCH
          # Aquí puedes agregar comandos para aplicar parches de Kernelsu, si son necesarios

      - name: Build KernelSU
        if: env.ENABLE_KERNELSU == 'true'
        run: |
          echo "Building KernelSU..."
          cd kernel
          # Asegúrate de que el script de construcción de Kernelsu se llame correctamente
          # Por ejemplo, podría ser algo como:
          # bash build_kernel_su.sh

      - name: Upload Kernel Image
        uses: actions/upload-artifact@latest
        with:
          name: kernel-image
          path: kernel/out/$KERNEL_IMAGE_NAME
